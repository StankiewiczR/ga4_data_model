config {
    type: "incremental",
    schema: constants.DATASET_BASIC,
    tags: ["ga4_basic", "ga4_reports"],
    bigquery: {
        partitionBy: "event_date",
        clusterBy: [
            "event_name",
            "platform",
            "country",
            "consent"
        ]
    }
}

WITH
  stg_events AS (
  SELECT
    event_timestamp,
    DATETIME(TIMESTAMP_SECONDS(CAST(event_timestamp / 1000000 AS int64)), '${constants.REPORTING_TIME_ZONE}') AS event_datetime,
    CAST(event_date AS date format 'yyyymmdd') AS event_date,
    LOWER(REPLACE(TRIM(event_name), " ", "_")) AS event_name,
    event_params,
    event_server_timestamp_offset,
    event_value_in_usd,
    event_bundle_sequence_id,
    ${helpers.unnest_column('event_params', 'ga_session_id', 'int_value')} AS ga_session_id,
    ${helpers.unnest_column('event_params', 'ga_session_number', 'int_value')} AS ga_session_number,
    ${helpers.unnest_column('event_params', 'engagement_time_msec', 'int_value')} AS engagement_time_msec,
    ${helpers.unnest_column('event_params', 'page_referrer')} AS page_referrer,
    ${helpers.unnest_column('event_params', 'page_location')} AS page_location,
    ${helpers.unnest_column('event_params', 'country')} AS country,
    ${helpers.unnest_column('event_params', 'entrances')} AS entrances,
    user_id,
    user_pseudo_id,
    user_properties,
    user_first_touch_timestamp,
    device,
    app_info,
    platform,
    stream_id,
    geo,
    items,
    ecommerce,
    -- --
    (
    SELECT
      AS STRUCT collected_traffic_source.manual_campaign_id AS manual_campaign_id,
      LOWER(collected_traffic_source.manual_campaign_name) AS manual_campaign_name,
      LOWER(collected_traffic_source.manual_source) AS manual_source,
      LOWER(collected_traffic_source.manual_medium) AS manual_medium,
      LOWER(collected_traffic_source.manual_content) AS manual_content,
      LOWER(collected_traffic_source.manual_term) AS manual_term,
      LOWER(collected_traffic_source.manual_source_platform) AS manual_source_platform,
      LOWER(collected_traffic_source.manual_creative_format) AS manual_creative_format,
      LOWER(collected_traffic_source.manual_marketing_tactic) AS manual_marketing_tactic,
      collected_traffic_source.gclid AS gclid,
      collected_traffic_source.dclid AS dclid,
      collected_traffic_source.srsltid AS srsltid ) AS collected_traffic_source,
    -- --
    session_traffic_source_last_click,
    -- --
    (
    SELECT
      AS STRUCT LOWER(${helpers.unnest_column('event_params', 'source')}) AS SOURCE,
      LOWER(${helpers.unnest_column('event_params', 'medium')}) AS medium,
      LOWER(${helpers.unnest_column('event_params', 'campaign')}) AS campaign,
      LOWER(${helpers.unnest_column('event_params', 'content')}) AS content,
      LOWER(${helpers.unnest_column('event_params', 'term')}) AS term,
      ${helpers.unnest_column('event_params', 'gclid')} AS gclid,
      ${helpers.unnest_column('event_params', 'dclid')} AS dclid,
      ${helpers.unnest_column('event_params', 'srsltid')} AS srsltid ) AS event_traffic_source,
    -- --
    (
    SELECT
      AS STRUCT traffic_source.source AS SOURCE,
      traffic_source.medium AS medium,
      traffic_source.name AS campaign ) AS traffic_source,
    -- --
    COALESCE( (${helpers.unnest_column('event_params', 'session_engaged', 'int_value')}), (CASE
          WHEN (${helpers.unnest_column('event_params', 'session_engaged')}) = "1" THEN 1
      END
        ) ) AS session_engaged,
    -- --
    CASE
      WHEN user_pseudo_id IS NOT NULL THEN 'granted'
      ELSE 'denied'
  END
    AS consent
  FROM
    ${ref('events_*')}
  WHERE
    _table_suffix NOT LIKE "%intraday%"
    AND _table_suffix NOT LIKE "%fresh%"
    AND CAST(_table_suffix AS date format 'yyyymmdd') >= event_date_checkpoint
    ---    AND user_pseudo_id IS NOT NULL
  UNION ALL
  SELECT
    event_timestamp,
    DATETIME(TIMESTAMP_SECONDS(CAST(event_timestamp / 1000000 AS int64)), '${constants.REPORTING_TIME_ZONE}') AS event_datetime,
    CAST(event_date AS date format 'yyyymmdd') AS event_date,
    LOWER(REPLACE(TRIM(event_name), " ", "_")) AS event_name,
    event_params,
    event_server_timestamp_offset,
    event_value_in_usd,
    event_bundle_sequence_id,
    ${helpers.unnest_column('event_params', 'ga_session_id', 'int_value')} AS ga_session_id,
    ${helpers.unnest_column('event_params', 'ga_session_number', 'int_value')} AS ga_session_number,
    ${helpers.unnest_column('event_params', 'engagement_time_msec', 'int_value')} AS engagement_time_msec,
    ${helpers.unnest_column('event_params', 'page_referrer')} AS page_referrer,
    ${helpers.unnest_column('event_params', 'page_location')} AS page_location,
    ${helpers.unnest_column('event_params', 'country')} AS country,
    ${helpers.unnest_column('event_params', 'entrances')} AS entrances,
    user_id,
    user_pseudo_id,
    user_properties,
    user_first_touch_timestamp,
    device,
    app_info,
    platform,
    stream_id,
    geo,
    items,
    ecommerce,
    -- --
    (
    SELECT
      AS STRUCT collected_traffic_source.manual_campaign_id AS manual_campaign_id,
      LOWER(collected_traffic_source.manual_campaign_name) AS manual_campaign_name,
      LOWER(collected_traffic_source.manual_source) AS manual_source,
      LOWER(collected_traffic_source.manual_medium) AS manual_medium,
      LOWER(collected_traffic_source.manual_content) AS manual_content,
      LOWER(collected_traffic_source.manual_term) AS manual_term,
      LOWER(collected_traffic_source.manual_source_platform) AS manual_source_platform,
      LOWER(collected_traffic_source.manual_creative_format) AS manual_creative_format,
      LOWER(collected_traffic_source.manual_marketing_tactic) AS manual_marketing_tactic,
      collected_traffic_source.gclid AS gclid,
      collected_traffic_source.dclid AS dclid,
      collected_traffic_source.srsltid AS srsltid ) AS collected_traffic_source,
    -- --
    session_traffic_source_last_click,
    -- --
    (
    SELECT
      AS STRUCT LOWER(${helpers.unnest_column('event_params', 'source')}) AS SOURCE,
      LOWER(${helpers.unnest_column('event_params', 'medium')}) AS medium,
      LOWER(${helpers.unnest_column('event_params', 'campaign')}) AS campaign,
      LOWER(${helpers.unnest_column('event_params', 'content')}) AS content,
      LOWER(${helpers.unnest_column('event_params', 'term')}) AS term,
      ${helpers.unnest_column('event_params', 'gclid')} AS gclid,
      ${helpers.unnest_column('event_params', 'dclid')} AS dclid,
      ${helpers.unnest_column('event_params', 'srsltid')} AS srsltid ) AS event_traffic_source,
    -- --
    (
    SELECT
      AS STRUCT traffic_source.source AS SOURCE,
      traffic_source.medium AS medium,
      traffic_source.name AS campaign ) AS traffic_source,
    -- --
    COALESCE( (${helpers.unnest_column('event_params', 'session_engaged', 'int_value')}), (CASE
          WHEN (${helpers.unnest_column('event_params', 'session_engaged')}) = "1" THEN 1
      END
        ) ) AS session_engaged,
    -- --
    CASE
      WHEN user_pseudo_id IS NOT NULL THEN 'granted'
      ELSE 'denied'
  END
    AS consent
  FROM
    ${ref('events_*')}
  WHERE
    _table_suffix LIKE "%intraday%"
    AND _table_suffix NOT LIKE "%fresh%"
    AND _table_suffix <= REPLACE(CONCAT("intraday_", current_date()), '-', '' )  )


    SELECT *,
    FIRST_VALUE(page_location) OVER (PARTITION BY user_pseudo_id, ga_session_id ORDER BY event_timestamp ASC ROWS BETWEEN UNBOUNDED PRECEDING AND UNBOUNDED FOLLOWING) AS landing_page,
    LAST_VALUE(page_location) OVER (PARTITION BY user_pseudo_id, ga_session_id ORDER BY event_timestamp DESC ROWS BETWEEN UNBOUNDED PRECEDING AND UNBOUNDED FOLLOWING) AS exit_page
     FROM stg_events

pre_operations {
  DECLARE
    event_date_checkpoint DEFAULT (
    ${
        when(incremental(),
            `select max(event_date) -3 from ${self()} WHERE event_date >= current_date() - 10 `,
            `select cast('${constants.START_DATE}' as date format 'yyyymmdd')`)
    }
    );
  DECLARE
    is_active_user bool DEFAULT NULL;
  CREATE TEMP FUNCTION
    URLDECODE(value STRING)
    RETURNS STRING
    LANGUAGE js AS """
              try {
                return decodeURIComponent(value) === 'null' ? null : decodeURIComponent(value);
                } catch (e) {
                  return value;
                  }
                  """;
                  ${
                      when(incremental(),
                          `delete from ${self()} where event_date >= event_date_checkpoint`)
                  }
}
